/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BondInterface extends utils.Interface {
  functions: {
    "DOUBLE_MULTER()": FunctionFragment;
    "USDT()": FunctionFragment;
    "bitConey()": FunctionFragment;
    "bond(uint256)": FunctionFragment;
    "bondAmount()": FunctionFragment;
    "bondInfo(address)": FunctionFragment;
    "bondPrice()": FunctionFragment;
    "bondingPeriod()": FunctionFragment;
    "claim()": FunctionFragment;
    "getUserClaimTime(address)": FunctionFragment;
    "isAvailableBondByAmount(uint256)": FunctionFragment;
    "isAvailableBondByTime()": FunctionFragment;
    "isAvailableClaim(address)": FunctionFragment;
    "lockingPeriod()": FunctionFragment;
    "maxBondAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setInitialBondState()": FunctionFragment;
    "setLockingPeriod(uint256)": FunctionFragment;
    "setMaxBondAmount(uint256)": FunctionFragment;
    "setStartBond(uint256,uint256)": FunctionFragment;
    "startBond()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userClaimAmount(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOUBLE_MULTER"
      | "USDT"
      | "bitConey"
      | "bond"
      | "bondAmount"
      | "bondInfo"
      | "bondPrice"
      | "bondingPeriod"
      | "claim"
      | "getUserClaimTime"
      | "isAvailableBondByAmount"
      | "isAvailableBondByTime"
      | "isAvailableClaim"
      | "lockingPeriod"
      | "maxBondAmount"
      | "owner"
      | "renounceOwnership"
      | "setInitialBondState"
      | "setLockingPeriod"
      | "setMaxBondAmount"
      | "setStartBond"
      | "startBond"
      | "transferOwnership"
      | "userClaimAmount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOUBLE_MULTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(functionFragment: "bitConey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "bondPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bondingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserClaimTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailableBondByAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailableBondByTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailableClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBondAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialBondState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLockingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBondAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartBond",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "startBond", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaimAmount",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOUBLE_MULTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bitConey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailableBondByAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailableBondByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailableClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBondAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialBondState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBondAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimAmount",
    data: BytesLike
  ): Result;

  events: {
    "BondEvent(address,uint256,uint256)": EventFragment;
    "ClaimEvent(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BondEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BondEventEventObject {
  user: string;
  amount: BigNumber;
  time: BigNumber;
}
export type BondEventEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BondEventEventObject
>;

export type BondEventEventFilter = TypedEventFilter<BondEventEvent>;

export interface ClaimEventEventObject {
  user: string;
  amount: BigNumber;
}
export type ClaimEventEvent = TypedEvent<
  [string, BigNumber],
  ClaimEventEventObject
>;

export type ClaimEventEventFilter = TypedEventFilter<ClaimEventEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Bond extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BondInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOUBLE_MULTER(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDT(overrides?: CallOverrides): Promise<[string]>;

    bitConey(overrides?: CallOverrides): Promise<[string]>;

    bond(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        bondingTime: BigNumber;
        bondPrice: BigNumber;
      }
    >;

    bondPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserClaimTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAvailableBondByAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAvailableBondByTime(overrides?: CallOverrides): Promise<[boolean]>;

    isAvailableClaim(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxBondAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitialBondState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLockingPeriod(
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxBondAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStartBond(
      _price: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startBond(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userClaimAmount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DOUBLE_MULTER(overrides?: CallOverrides): Promise<BigNumber>;

  USDT(overrides?: CallOverrides): Promise<string>;

  bitConey(overrides?: CallOverrides): Promise<string>;

  bond(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

  bondInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      bondingTime: BigNumber;
      bondPrice: BigNumber;
    }
  >;

  bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

  bondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserClaimTime(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAvailableBondByAmount(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAvailableBondByTime(overrides?: CallOverrides): Promise<boolean>;

  isAvailableClaim(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  maxBondAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInitialBondState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLockingPeriod(
    _period: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxBondAmount(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStartBond(
    _price: PromiseOrValue<BigNumberish>,
    _period: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startBond(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userClaimAmount(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DOUBLE_MULTER(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<string>;

    bitConey(overrides?: CallOverrides): Promise<string>;

    bond(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

    bondInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        bondingTime: BigNumber;
        bondPrice: BigNumber;
      }
    >;

    bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    getUserClaimTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailableBondByAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAvailableBondByTime(overrides?: CallOverrides): Promise<boolean>;

    isAvailableClaim(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxBondAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setInitialBondState(overrides?: CallOverrides): Promise<void>;

    setLockingPeriod(
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBondAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStartBond(
      _price: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startBond(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userClaimAmount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BondEvent(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      time?: null
    ): BondEventEventFilter;
    BondEvent(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      time?: null
    ): BondEventEventFilter;

    "ClaimEvent(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventEventFilter;
    ClaimEvent(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DOUBLE_MULTER(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    bitConey(overrides?: CallOverrides): Promise<BigNumber>;

    bond(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

    bondInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserClaimTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailableBondByAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailableBondByTime(overrides?: CallOverrides): Promise<BigNumber>;

    isAvailableClaim(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxBondAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInitialBondState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLockingPeriod(
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxBondAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStartBond(
      _price: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startBond(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userClaimAmount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOUBLE_MULTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bitConey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bond(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserClaimTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAvailableBondByAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAvailableBondByTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAvailableClaim(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBondAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInitialBondState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLockingPeriod(
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBondAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStartBond(
      _price: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startBond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userClaimAmount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
